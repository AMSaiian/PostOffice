// <auto-generated />
using System;
using Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(PostOfficeContext))]
    [Migration("20231220160235_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Data.Entities.CategoryMark", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MarkId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CategoryId", "MarkId");

                    b.HasIndex("MarkId");

                    b.ToTable("CategoryMark");
                });

            modelBuilder.Entity("Data.Entities.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("Client_email")
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("PhoneNumber")
                        .IsUnique()
                        .HasDatabaseName("Client_phone_number");

                    b.HasIndex("Name", "Surname")
                        .IsUnique()
                        .HasDatabaseName("Client_fullname");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("Data.Entities.ItemCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("Category_name");

                    b.ToTable("ItemCategory");
                });

            modelBuilder.Entity("Data.Entities.Parcel", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OfficeFromId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OfficeToId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OfficeFromId");

                    b.HasIndex("OfficeToId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Parcel");
                });

            modelBuilder.Entity("Data.Entities.ParcelItem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ItemCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ParcelId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ItemCategoryId");

                    b.HasIndex("ParcelId");

                    b.ToTable("ParcelItem");
                });

            modelBuilder.Entity("Data.Entities.ParcelStatusHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ChangesTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ParcelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParcelId");

                    b.ToTable("ParcelStatusHistory");
                });

            modelBuilder.Entity("Data.Entities.Position", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("Position_name");

                    b.ToTable("Position");
                });

            modelBuilder.Entity("Data.Entities.PostOffice", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("Id");

                    b.HasIndex("Zip")
                        .IsUnique()
                        .HasDatabaseName("Office_zip");

                    b.ToTable("PostOffice");
                });

            modelBuilder.Entity("Data.Entities.ShipmentMark", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("PriceCoef")
                        .HasColumnType("float");

                    b.Property<int>("ShipmentConstraint")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ShipmentConstraint")
                        .IsUnique()
                        .HasDatabaseName("Shipment_constraint_type");

                    b.ToTable("ShipmentMark");
                });

            modelBuilder.Entity("Data.Entities.Staff", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<Guid>("PositionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PostOfficeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PhoneNumber")
                        .IsUnique()
                        .HasDatabaseName("Staff_phone_number");

                    b.HasIndex("PositionId");

                    b.HasIndex("PostOfficeId");

                    b.HasIndex("Name", "Surname")
                        .IsUnique()
                        .HasDatabaseName("Staff_fullname");

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("Data.Entities.CategoryMark", b =>
                {
                    b.HasOne("Data.Entities.ItemCategory", "Category")
                        .WithMany("CategoryMarks")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.ShipmentMark", "Mark")
                        .WithMany("CategoryMarks")
                        .HasForeignKey("MarkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Mark");
                });

            modelBuilder.Entity("Data.Entities.Parcel", b =>
                {
                    b.HasOne("Data.Entities.PostOffice", "OfficeFrom")
                        .WithMany("SendParcels")
                        .HasForeignKey("OfficeFromId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Entities.PostOffice", "OfficeTo")
                        .WithMany("ReceiveParcels")
                        .HasForeignKey("OfficeToId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Entities.Client", "Receiver")
                        .WithMany("AddressedParcels")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Entities.Client", "Sender")
                        .WithMany("SentParcels")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OfficeFrom");

                    b.Navigation("OfficeTo");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Data.Entities.ParcelItem", b =>
                {
                    b.HasOne("Data.Entities.ItemCategory", "ItemCategory")
                        .WithMany("ParcelItems")
                        .HasForeignKey("ItemCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Parcel", "Parcel")
                        .WithMany("ParcelFilling")
                        .HasForeignKey("ParcelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Data.Entities.ParcelItem+Gabarites", "Characteristics", b1 =>
                        {
                            b1.Property<Guid>("ParcelItemId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Depth")
                                .HasColumnType("int");

                            b1.Property<int>("Height")
                                .HasColumnType("int");

                            b1.Property<double>("Weight")
                                .HasColumnType("float");

                            b1.Property<int>("Width")
                                .HasColumnType("int");

                            b1.HasKey("ParcelItemId");

                            b1.ToTable("ParcelItem");

                            b1.WithOwner()
                                .HasForeignKey("ParcelItemId");
                        });

                    b.Navigation("Characteristics")
                        .IsRequired();

                    b.Navigation("ItemCategory");

                    b.Navigation("Parcel");
                });

            modelBuilder.Entity("Data.Entities.ParcelStatusHistory", b =>
                {
                    b.HasOne("Data.Entities.Parcel", "Parcel")
                        .WithMany("ParcelHistory")
                        .HasForeignKey("ParcelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parcel");
                });

            modelBuilder.Entity("Data.Entities.PostOffice", b =>
                {
                    b.OwnsOne("Data.Entities.PostOffice+Address", "Location", b1 =>
                        {
                            b1.Property<Guid>("PostOfficeId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("BuildingNumber")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PostOfficeId");

                            b1.ToTable("PostOffice");

                            b1.WithOwner()
                                .HasForeignKey("PostOfficeId");
                        });

                    b.Navigation("Location")
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Entities.Staff", b =>
                {
                    b.HasOne("Data.Entities.Position", "Position")
                        .WithMany("Staff")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.PostOffice", "PostOffice")
                        .WithMany("OfficeStaff")
                        .HasForeignKey("PostOfficeId");

                    b.Navigation("Position");

                    b.Navigation("PostOffice");
                });

            modelBuilder.Entity("Data.Entities.Client", b =>
                {
                    b.Navigation("AddressedParcels");

                    b.Navigation("SentParcels");
                });

            modelBuilder.Entity("Data.Entities.ItemCategory", b =>
                {
                    b.Navigation("CategoryMarks");

                    b.Navigation("ParcelItems");
                });

            modelBuilder.Entity("Data.Entities.Parcel", b =>
                {
                    b.Navigation("ParcelFilling");

                    b.Navigation("ParcelHistory");
                });

            modelBuilder.Entity("Data.Entities.Position", b =>
                {
                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Data.Entities.PostOffice", b =>
                {
                    b.Navigation("OfficeStaff");

                    b.Navigation("ReceiveParcels");

                    b.Navigation("SendParcels");
                });

            modelBuilder.Entity("Data.Entities.ShipmentMark", b =>
                {
                    b.Navigation("CategoryMarks");
                });
#pragma warning restore 612, 618
        }
    }
}
